{"name":"PicBac","tagline":"Automatically back up photos to an external drive","body":"# PicBac\r\nAutomatically back up photos to an external drive\r\n\r\n## License\r\nPlease see the [license](https://github.com/steventhanna/PicBac/blob/master/LICENSE).\r\n\r\n## Purpose\r\nBecuase my Dad was frustrated with the buggy iCloud Photos backup, I created PicBac to automatically back up photos in a given directory to an external hard drive.\r\n\r\nPicBac works best nested insidea CRON job, as it allow PicBac to run at a constant interval, whenever the user pleases.\r\n\r\nFor speed reasons, PicBac only backs up files that meet the following criteria\r\n- The file is one of the following: `png, jpg, jpeg, gif, tiff`\r\n- The file to be backed up is newer than the file on the disk\r\n\r\n## Installation\r\nFirst **clone** the project.\r\n\r\nPlease note the following lines in `PicBac.py`\r\n\r\n```python\r\n# Constants for user to edit\r\n# The source file to scan\r\nsource = \"EDIT_SOURCE\"\r\n# The destination drive to copy\r\ndestination = \"EDIT_DESTINATION\"\r\n```\r\n\r\nThe `source` variable and the `destination` variable are what should be changed from machine to machine.\r\n- `source` - the file tree to walk, searcing for images to backup\r\n- `destination` - where the images to be backed up will be copied too\r\n\r\nIt's pretty straightforward.\r\n\r\n## Usage\r\nThere are two methods that I forsee this being used.\r\n\r\n### Manually\r\nNavigate in your preferred CLI to wherever your project is located.\r\n\r\n```bash\r\npython PicBac.py\r\n```\r\n\r\n### As a CRON Job\r\n\r\nAlthough my end user was on OSX, this can be adopted to other Unix canidates\r\n\r\nThe content below os specific to OSX\r\n\r\n#### Open the CRON File\r\nUse your editor of choice... Mine is [Atom](http://atom.io).\r\n\r\n```bash\r\nenv EDITOR=atom crontab -e\r\n```\r\n\r\nwhere `atom` can be replaced with `vim`, `nano`, `emacs`, etc.\r\n\r\n#### Timing Sequence\r\n[**Reference Article**](http://www.techradar.com/us/how-to/computing/apple/terminal-101-creating-cron-jobs-1305651)\r\n\r\nThe timing sequence of a CRON job looks like this: `* * * * *`\r\n- The first asterisk is for specifying the minute of the run (0-59)\r\n- The second asterisk is for specifying the hour of the run (0-23)\r\n- The third asterisk is for specifying the day of the month for the run (1-31)\r\n- The fourth asterisk is for specifying the month of the run (1-12)\r\n- The fifth asterisk is for specifying the day of the week (where Sunday is equal to 0, up to Saturday is equal to 6)\r\n\r\nIf you wanted to run the job every day at 1:00pm: `0 13 * * *`\r\n\r\nIf you wanted the job to run every 30 minutes, you could use the following sequence: `30 * * * *`\r\n\r\nAnd, lastly, if you wanted the job to run once a week on Wednesday, you could type the following sequence: `* * * * 3`\r\n\r\nBecuase PicBac only transfers files if the specified path exists, an external drive can be set.  When the external drive is not found, no errors are thrown, it will just try again at the next designated time.\r\n\r\nIn my Dad's case, I have it configured to run once a day, at 12am. `0 0 * * *`\r\n\r\n#### Save CRON File\r\nSave the CRON file per your editors specifications\r\n\r\n#### Verify CRON Job\r\nTo verify the existance of the CRON job:\r\n\r\n```bash\r\ncrontab -l\r\n```\r\n\r\n## Contributing / Issue's\r\nIf you find any issues, please report them on this repo's issue [page](https://github.com/steventhanna/PicBac/issues).\r\n\r\nPull requests to make this software even better are always welcome.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}